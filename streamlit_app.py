# import streamlit as st
# import requests
# import datetime
# import sys

# BASE_URL = "http://localhost:8000"  # Backend endpoint

# st.set_page_config(
#     page_title="🌍 Travel Planner Agentic Application",
#     page_icon="🌍",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("🌍 Travel Planner Agentic Application")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# 🌍 AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Atriyo's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         raise f"The response failed due to {e}"
    

import streamlit as st
import requests
import datetime
import sys
from PIL import Image
import io
import os
import base64

BASE_URL = "http://localhost:8000"  # Backend endpoint

st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")
st.markdown("Plan your perfect trip by location or simply upload a landmark photo!")

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []

# Create tabs for different input methods
tab1, tab2 = st.tabs(["📍 Plan by Location", "📸 Plan by Landmark Image"])

# ==================== TAB 1: Plan by Location ====================
with tab1:
    st.header("Plan Trip by Location")
    st.write("Tell me where you want to go and I'll create a detailed travel plan for you!")
    
    # Chat input box
    with st.form(key="query_form", clear_on_submit=True):
        user_input = st.text_input(
            "Enter your travel query", 
            placeholder="e.g. Plan a trip to Goa for 5 days",
            help="Ask about destinations, itineraries, weather, costs, etc."
        )
        submit_button = st.form_submit_button("🚀 Plan My Trip")

    if submit_button and user_input.strip():
        try:
            # Show user message
            with st.chat_message("user"):
                st.write(user_input)
            
            # Show thinking spinner while backend processes
            with st.spinner("🤖 Bot is thinking and planning your trip..."):
                payload = {"question": user_input}
                response = requests.post(f"{BASE_URL}/query", json=payload, timeout=120)

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")
                
                # Display bot response
                with st.chat_message("assistant"):
                    st.markdown(answer)
                
                # Create downloadable travel plan
                markdown_content = f"""# 🌍 AI Travel Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Query:** {user_input}

---

{answer}

---

*This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
"""
                
                # Download button
                st.download_button(
                    label="📥 Download Travel Plan",
                    data=markdown_content,
                    file_name=f"travel_plan_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.md",
                    mime="text/markdown"
                )
                
            else:
                st.error(f"❌ Bot failed to respond: {response.text}")

        except requests.exceptions.Timeout:
            st.error("⏱️ Request timed out. The query might be too complex. Please try again.")
        except Exception as e:
            st.error(f"❌ An error occurred: {str(e)}")


# ==================== TAB 2: Plan by Landmark Image ====================
with tab2:
    st.header("Plan Trip from Landmark Photo")
    st.write("Upload a photo of a famous landmark and I'll identify it and plan your trip!")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            "📷 Upload a landmark image", 
            type=['jpg', 'jpeg', 'png'],
            help="Upload a clear photo of a famous landmark like the Eiffel Tower, Taj Mahal, etc."
        )
        
        if uploaded_file is not None:
            # Display uploaded image
            image = Image.open(uploaded_file)
            st.image(image, caption='Your Uploaded Image', width='stretch')
    
    with col2:
        if uploaded_file is not None:
            st.write("### 🎯 Ready to identify!")
            st.write("Click the button below to:")
            st.write("✓ Identify the landmark")
            st.write("✓ Get location details")
            st.write("✓ Generate a complete trip plan")
            
            identify_button = st.button("🔍 Identify & Plan Trip", type="primary", use_container_width=True)
            
            if identify_button:
                try:
                    # Save uploaded file temporarily
                    temp_image_path = "temp_uploaded_image.jpg"
                    image = Image.open(uploaded_file)
                    image.save(temp_image_path)
                    
                    # Show processing status
                    with st.spinner("🤖 Analyzing your image with AI..."):
                        # Import the landmark recognition tool
                        try:
                            from tools.landmark_recognition_tool import landmark_recognition_tool
                            
                            # Recognize landmark
                            result = landmark_recognition_tool(temp_image_path)
                            
                        except ImportError as ie:
                            st.error("❌ Landmark recognition module not found. Please ensure the model is trained.")
                            st.info("💡 Run these commands first:\n1. `python create_dataset.py`\n2. `python train_landmark_model.py`")
                            result = {'success': False, 'message': 'Module not available'}
                        except Exception as e:
                            st.error(f"❌ Error during landmark recognition: {str(e)}")
                            result = {'success': False, 'message': str(e)}
                    
                    # Clean up temp file
                    if os.path.exists(temp_image_path):
                        os.remove(temp_image_path)
                    
                    if result['success']:
                        # Show recognition results
                        st.success(f"✅ Identified: **{result['landmark_name']}**")
                        
                        # Display location info in a nice format
                        st.info(f"📍 **Location:** {result['city']}, {result['country']}")
                        
                        # Confidence meter
                        confidence = result['confidence']
                        st.metric(
                            label="🎯 Confidence Level", 
                            value=f"{confidence:.1f}%",
                            help="How confident the AI is about this identification"
                        )
                        
                        # Show progress bar for confidence
                        st.progress(confidence / 100)
                        
                        # Show other possible landmarks
                        if len(result['all_predictions']) > 1:
                            with st.expander("🔎 See other possible landmarks"):
                                for i, pred in enumerate(result['all_predictions'][1:], 2):
                                    st.write(f"**{i}.** {pred['landmark']} ({pred['city']}, {pred['country']}) - {pred['confidence']:.1f}% confidence")
                        
                        # Generate trip plan
                        st.markdown("---")
                        st.header("📅 Generating Your Trip Plan...")
                        
                        with st.spinner("🗺️ Creating a detailed travel itinerary..."):
                            # Create query for the travel agent
                            travel_query = f"Plan a trip to {result['landmark_name']} in {result['city']}, {result['country']}. Include best time to visit, things to do, places to see nearby, estimated costs, and a 3-day itinerary."
                            
                            payload = {"question": travel_query}
                            response = requests.post(f"{BASE_URL}/query", json=payload, timeout=120)
                        
                        if response.status_code == 200:
                            answer = response.json().get("answer", "No answer returned.")
                            
                            # Display the trip plan
                            st.markdown("### 🎉 Your Personalized Trip Plan")
                            with st.chat_message("assistant"):
                                st.markdown(answer)
                            
                            # Create downloadable plan
                            markdown_content = f"""# 🌍 AI Travel Plan - {result['landmark_name']}

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Landmark:** {result['landmark_name']}  
**Location:** {result['city']}, {result['country']}  
**Coordinates:** {result['latitude']}, {result['longitude']}  
**Confidence:** {result['confidence']:.1f}%

---

## 🗺️ Trip Details

{answer}

---

## 📌 Landmark Information

- **Name:** {result['landmark_name']}
- **City:** {result['city']}
- **Country:** {result['country']}
- **GPS:** {result['latitude']}, {result['longitude']}

---

*This travel plan was generated by AI based on landmark recognition. Please verify all information before your trip.*
"""
                            
                            # Download button
                            st.download_button(
                                label="📥 Download Complete Travel Plan",
                                data=markdown_content,
                                file_name=f"landmark_trip_{result['landmark_name'].replace(' ', '_')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.md",
                                mime="text/markdown"
                            )
                            
                        else:
                            st.error(f"❌ Failed to generate trip plan: {response.text}")
                    
                    else:
                        # Recognition failed
                        st.error("❌ " + result['message'])
                        
                        st.info("💡 **Tips for better results:**")
                        st.write("• Use a clear, well-lit photo")
                        st.write("• Make sure the landmark is the main subject")
                        st.write("• Avoid heavily filtered or edited images")
                        st.write("• Try to capture the landmark from a recognizable angle")
                        
                        # Show example
                        st.markdown("### ✅ Good Examples:")
                        st.write("- Clear front view of the Eiffel Tower")
                        st.write("- Full view of the Taj Mahal with reflection pool")
                        st.write("- Statue of Liberty from the front")
                
                except requests.exceptions.Timeout:
                    st.error("⏱️ Request timed out. Please try again.")
                except Exception as e:
                    st.error(f"❌ An error occurred: {str(e)}")
                    import traceback
                    with st.expander("🔧 Error Details (for debugging)"):
                        st.code(traceback.format_exc())
        else:
            st.info("👆 Upload an image to get started!")


# ==================== SIDEBAR ====================
with st.sidebar:
    st.header("ℹ️ About")
    st.write("""
    This AI-powered travel planner helps you:
    
    **📍 Plan by Location:**
    - Get detailed itineraries
    - Weather information
    - Cost estimates
    - Currency conversion
    - Place recommendations
    
    **📸 Plan by Image:**
    - Upload landmark photos
    - AI identifies the location
    - Auto-generates trip plans
    - Works with 50+ famous landmarks
    """)
    
    st.markdown("---")
    
    st.header("🎯 Supported Landmarks")
    with st.expander("See landmark list"):
        landmarks = [
            "Eiffel Tower", "Taj Mahal", "Statue of Liberty", 
            "Big Ben", "Colosseum", "Great Wall of China",
            "Machu Picchu", "Christ the Redeemer", "Petra",
            "Sydney Opera House", "Burj Khalifa", "Sagrada Familia",
            "Pyramids of Giza", "Golden Gate Bridge", "Mount Rushmore",
            "And many more..."
        ]
        for landmark in landmarks:
            st.write(f"✓ {landmark}")
    
    st.markdown("---")
    
    st.header("💡 Tips")
    st.write("""
    **For best results:**
    - Be specific in your queries
    - Mention travel dates if known
    - Specify your budget range
    - Upload clear landmark photos
    - Check weather before finalizing
    """)
    
    st.markdown("---")
    st.caption("Powered by AI • LangGraph • FastAPI")
    st.caption("© 2024 Atriyo's Travel Agent")


# ==================== FOOTER ====================
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
        <p>🌟 Made with ❤️ using Streamlit, FastAPI, and AI</p>
        <p>Have questions? Need help planning? Just ask!</p>
    </div>
    """,
    unsafe_allow_html=True
)